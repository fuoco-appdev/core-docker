# Usage
#   Start:          docker compose up
#   With helpers:   docker compose -f docker-compose.yml -f ./dev/docker-compose.dev.yml up
#   Stop:           docker compose down
#   Destroy:        docker compose -f docker-compose.yml -f ./dev/docker-compose.dev.yml down -v --remove-orphans

version: "3.8"

services:
  studio:
    container_name: supabase-studio
    image: supabase/studio:20230712-32f559d
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/api/profile', (r) => {if (r.statusCode !== 200) throw new Error(r.statusCode)})"
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    ports:
      - ${STUDIO_PORT}:3000/tcp
    environment:
      STUDIO_PG_META_URL: http://meta:8080
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DEFAULT_ORGANIZATION_NAME: ${STUDIO_DEFAULT_ORGANIZATION}
      DEFAULT_PROJECT_NAME: ${STUDIO_DEFAULT_PROJECT}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_PUBLIC_URL: ${SUPABASE_PUBLIC_URL}
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}

  kong:
    container_name: supabase-kong
    image: kong:2.8.1
    restart: unless-stopped
    # https://unix.stackexchange.com/a/294837
    entrypoint: bash -c 'eval "echo \"$$(cat ~/temp.yml)\"" > ~/kong.yml && /docker-entrypoint.sh kong docker-start'
    ports:
      - ${KONG_HTTP_PORT}:8000/tcp
      - ${KONG_HTTPS_PORT}:8443/tcp
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /home/kong/kong.yml
      # https://github.com/supabase/cli/issues/14
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}
    volumes:
      # https://github.com/supabase/supabase/issues/12661
      - ./volumes/api/kong.yml:/home/kong/temp.yml:ro

  auth:
    container_name: supabase-auth
    image: supabase/gotrue:v2.62.1
    depends_on:
      db:
        # Disable this if you are using an external Postgres database
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9999/health"
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    restart: unless-stopped
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: ${API_EXTERNAL_URL}

      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://supabase_auth_admin:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

      GOTRUE_SITE_URL: ${SITE_URL}
      GOTRUE_URI_ALLOW_LIST: ${ADDITIONAL_REDIRECT_URLS}
      GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP}

      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: ${JWT_EXPIRY}
      GOTRUE_JWT_SECRET: ${JWT_SECRET}

      GOTRUE_EXTERNAL_EMAIL_ENABLED: ${ENABLE_EMAIL_SIGNUP}

      ## Github
      GOTRUE_EXTERNAL_GITHUB_ENABLED: ${GOTRUE_EXTERNAL_GITHUB_ENABLED}
      GOTRUE_EXTERNAL_GITHUB_CLIENT_ID: ${GOTRUE_EXTERNAL_GITHUB_CLIENT_ID}
      GOTRUE_EXTERNAL_GITHUB_SECRET: ${GOTRUE_EXTERNAL_GITHUB_SECRET}
      GOTRUE_EXTERNAL_GITHUB_REDIRECT_URI: ${GOTRUE_EXTERNAL_GITHUB_REDIRECT_URI}

      ## Apple
      GOTRUE_EXTERNAL_APPLE_ENABLED: ${GOTRUE_EXTERNAL_APPLE_ENABLED}
      GOTRUE_EXTERNAL_APPLE_CLIENT_ID: ${GOTRUE_EXTERNAL_APPLE_CLIENT_ID}
      GOTRUE_EXTERNAL_APPLE_SECRET: ${GOTRUE_EXTERNAL_APPLE_SECRET}
      GOTRUE_EXTERNAL_APPLE_REDIRECT_URI: ${GOTRUE_EXTERNAL_APPLE_REDIRECT_URI}

      ## Azure
      GOTRUE_EXTERNAL_AZURE_ENABLED: ${GOTRUE_EXTERNAL_AZURE_ENABLED}
      GOTRUE_EXTERNAL_AZURE_CLIENT_ID: ${GOTRUE_EXTERNAL_AZURE_CLIENT_ID}
      GOTRUE_EXTERNAL_AZURE_SECRET: ${GOTRUE_EXTERNAL_AZURE_SECRET}
      GOTRUE_EXTERNAL_AZURE_REDIRECT_URI: ${GOTRUE_EXTERNAL_AZURE_REDIRECT_URI}

      ## Bitbucket
      GOTRUE_EXTERNAL_BITBUCKET_ENABLED: ${GOTRUE_EXTERNAL_BITBUCKET_ENABLED}
      GOTRUE_EXTERNAL_BITBUCKET_CLIENT_ID: ${GOTRUE_EXTERNAL_BITBUCKET_CLIENT_ID}
      GOTRUE_EXTERNAL_BITBUCKET_SECRET: ${GOTRUE_EXTERNAL_BITBUCKET_SECRET}
      GOTRUE_EXTERNAL_BITBUCKET_REDIRECT_URI: ${GOTRUE_EXTERNAL_BITBUCKET_REDIRECT_URI}

      ## Discord
      GOTRUE_EXTERNAL_DISCORD_ENABLED: ${GOTRUE_EXTERNAL_DISCORD_ENABLED}
      GOTRUE_EXTERNAL_DISCORD_CLIENT_ID: ${GOTRUE_EXTERNAL_DISCORD_CLIENT_ID}
      GOTRUE_EXTERNAL_DISCORD_SECRET: ${GOTRUE_EXTERNAL_DISCORD_SECRET}
      GOTRUE_EXTERNAL_DISCORD_REDIRECT_URI: ${GOTRUE_EXTERNAL_DISCORD_REDIRECT_URI}

      ## Facebook
      GOTRUE_EXTERNAL_FACEBOOK_ENABLED: ${GOTRUE_EXTERNAL_FACEBOOK_ENABLED}
      GOTRUE_EXTERNAL_FACEBOOK_CLIENT_ID: ${GOTRUE_EXTERNAL_FACEBOOK_CLIENT_ID}
      GOTRUE_EXTERNAL_FACEBOOK_SECRET: ${GOTRUE_EXTERNAL_FACEBOOK_SECRET}
      GOTRUE_EXTERNAL_FACEBOOK_REDIRECT_URI: ${GOTRUE_EXTERNAL_FACEBOOK_REDIRECT_URI}

      ## Gitlab
      GOTRUE_EXTERNAL_GITLAB_ENABLED: ${GOTRUE_EXTERNAL_GITLAB_ENABLED}
      GOTRUE_EXTERNAL_GITLAB_CLIENT_ID: ${GOTRUE_EXTERNAL_GITLAB_CLIENT_ID}
      GOTRUE_EXTERNAL_GITLAB_SECRET: ${GOTRUE_EXTERNAL_GITLAB_SECRET}
      GOTRUE_EXTERNAL_GITLAB_REDIRECT_URI: ${GOTRUE_EXTERNAL_GITLAB_REDIRECT_URI}

      ## Google
      GOTRUE_EXTERNAL_GOOGLE_ENABLED: ${GOTRUE_EXTERNAL_GOOGLE_ENABLED}
      GOTRUE_EXTERNAL_GOOGLE_CLIENT_ID: ${GOTRUE_EXTERNAL_GOOGLE_CLIENT_ID}
      GOTRUE_EXTERNAL_GOOGLE_SECRET: ${GOTRUE_EXTERNAL_GOOGLE_SECRET}
      GOTRUE_EXTERNAL_GOOGLE_REDIRECT_URI: ${GOTRUE_EXTERNAL_GOOGLE_REDIRECT_URI}

      ## Keycloak
      GOTRUE_EXTERNAL_KEYCLOAK_ENABLED: ${GOTRUE_EXTERNAL_KEYCLOAK_ENABLED}
      GOTRUE_EXTERNAL_KEYCLOAK_CLIENT_ID: ${GOTRUE_EXTERNAL_KEYCLOAK_CLIENT_ID}
      GOTRUE_EXTERNAL_KEYCLOAK_SECRET: ${GOTRUE_EXTERNAL_KEYCLOAK_SECRET}
      GOTRUE_EXTERNAL_KEYCLOAK_REDIRECT_URI: ${GOTRUE_EXTERNAL_KEYCLOAK_REDIRECT_URI}

      ## Linkedin
      GOTRUE_EXTERNAL_LINKEDIN_ENABLED: ${GOTRUE_EXTERNAL_LINKEDIN_ENABLED}
      GOTRUE_EXTERNAL_LINKEDIN_CLIENT_ID: ${GOTRUE_EXTERNAL_LINKEDIN_CLIENT_ID}
      GOTRUE_EXTERNAL_LINKEDIN_SECRET: ${GOTRUE_EXTERNAL_LINKEDIN_SECRET}
      GOTRUE_EXTERNAL_LINKEDIN_REDIRECT_URI: ${GOTRUE_EXTERNAL_LINKEDIN_REDIRECT_URI}

      ## Notion
      GOTRUE_EXTERNAL_NOTION_ENABLED: ${GOTRUE_EXTERNAL_NOTION_ENABLED}
      GOTRUE_EXTERNAL_NOTION_CLIENT_ID: ${GOTRUE_EXTERNAL_NOTION_CLIENT_ID}
      GOTRUE_EXTERNAL_NOTION_SECRET: ${GOTRUE_EXTERNAL_NOTION_SECRET}
      GOTRUE_EXTERNAL_NOTION_REDIRECT_URI: ${GOTRUE_EXTERNAL_NOTION_REDIRECT_URI}

      ## Spotify
      GOTRUE_EXTERNAL_SPOTIFY_ENABLED: ${GOTRUE_EXTERNAL_SPOTIFY_ENABLED}
      GOTRUE_EXTERNAL_SPOTIFY_CLIENT_ID: ${GOTRUE_EXTERNAL_SPOTIFY_CLIENT_ID}
      GOTRUE_EXTERNAL_SPOTIFY_SECRET: ${GOTRUE_EXTERNAL_SPOTIFY_SECRET}
      GOTRUE_EXTERNAL_SPOTIFY_REDIRECT_URI: ${GOTRUE_EXTERNAL_SPOTIFY_REDIRECT_URI}

      ## Slack
      GOTRUE_EXTERNAL_SLACK_ENABLED: ${GOTRUE_EXTERNAL_SLACK_ENABLED}
      GOTRUE_EXTERNAL_SLACK_CLIENT_ID: ${GOTRUE_EXTERNAL_SLACK_CLIENT_ID}
      GOTRUE_EXTERNAL_SLACK_SECRET: ${GOTRUE_EXTERNAL_SLACK_SECRET}
      GOTRUE_EXTERNAL_SLACK_REDIRECT_URI: ${GOTRUE_EXTERNAL_SLACK_REDIRECT_URI}

      ## Twitch
      GOTRUE_EXTERNAL_TWITCH_ENABLED: ${GOTRUE_EXTERNAL_TWITCH_ENABLED}
      GOTRUE_EXTERNAL_TWITCH_CLIENT_ID: ${GOTRUE_EXTERNAL_TWITCH_CLIENT_ID}
      GOTRUE_EXTERNAL_TWITCH_SECRET: ${GOTRUE_EXTERNAL_TWITCH_SECRET}
      GOTRUE_EXTERNAL_TWITCH_REDIRECT_URI: ${GOTRUE_EXTERNAL_TWITCH_REDIRECT_URI}

      ## Twitter
      GOTRUE_EXTERNAL_TWITTER_ENABLED: ${GOTRUE_EXTERNAL_TWITTER_ENABLED}
      GOTRUE_EXTERNAL_TWITTER_CLIENT_ID: ${GOTRUE_EXTERNAL_TWITTER_CLIENT_ID}
      GOTRUE_EXTERNAL_TWITTER_SECRET: ${GOTRUE_EXTERNAL_TWITTER_SECRET}
      GOTRUE_EXTERNAL_TWITTER_REDIRECT_URI: ${GOTRUE_EXTERNAL_TWITTER_REDIRECT_URI}

      ## Workos
      GOTRUE_EXTERNAL_WORKOS_ENABLED: ${GOTRUE_EXTERNAL_WORKOS_ENABLED}
      GOTRUE_EXTERNAL_WORKOS_CLIENT_ID: ${GOTRUE_EXTERNAL_WORKOS_CLIENT_ID}
      GOTRUE_EXTERNAL_WORKOS_SECRET: ${GOTRUE_EXTERNAL_WORKOS_SECRET}
      GOTRUE_EXTERNAL_WORKOS_REDIRECT_URI: ${GOTRUE_EXTERNAL_WORKOS_REDIRECT_URI}

      GOTRUE_MAILER_AUTOCONFIRM: ${ENABLE_EMAIL_AUTOCONFIRM}
      # GOTRUE_MAILER_SECURE_EMAIL_CHANGE_ENABLED: true
      # GOTRUE_SMTP_MAX_FREQUENCY: 1s
      GOTRUE_SMTP_ADMIN_EMAIL: ${SMTP_ADMIN_EMAIL}
      GOTRUE_SMTP_HOST: ${SMTP_HOST}
      GOTRUE_SMTP_PORT: ${SMTP_PORT}
      GOTRUE_SMTP_USER: ${SMTP_USER}
      GOTRUE_SMTP_PASS: ${SMTP_PASS}
      GOTRUE_SMTP_SENDER_NAME: ${SMTP_SENDER_NAME}
      GOTRUE_MAILER_URLPATHS_INVITE: ${MAILER_URLPATHS_INVITE}
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: ${MAILER_URLPATHS_CONFIRMATION}
      GOTRUE_MAILER_URLPATHS_RECOVERY: ${MAILER_URLPATHS_RECOVERY}
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: ${MAILER_URLPATHS_EMAIL_CHANGE}
      GOTRUE_MAILER_SUBJECTS_INVITE: ${MAILER_SUBJECTS_INVITE}
      GOTRUE_MAILER_SUBJECTS_CONFIRMATION: ${MAILER_SUBJECTS_CONFIRMATION}
      GOTRUE_MAILER_SUBJECTS_RECOVERY: ${MAILER_SUBJECTS_RECOVERY}
      GOTRUE_MAILER_SUBJECTS_MAGIC_LINK: ${MAILER_SUBJECTS_MAGIC_LINK}
      GOTRUE_MAILER_TEMPLATES_INVITE: ${MAILER_TEMPLATES_INVITE}
      GOTRUE_MAILER_TEMPLATES_CONFIRMATION: ${MAILER_TEMPLATES_CONFIRMATION}
      GOTRUE_MAILER_TEMPLATES_RECOVERY: ${MAILER_TEMPLATES_RECOVERY}
      GOTRUE_MAILER_TEMPLATES_MAGIC_LINK: ${MAILER_TEMPLATES_MAGIC_LINK}
      GOTRUE_EXTERNAL_PHONE_ENABLED: ${ENABLE_PHONE_SIGNUP}
      GOTRUE_SMS_AUTOCONFIRM: ${ENABLE_PHONE_AUTOCONFIRM}
      MFA_ENABLED: ${MFA_ENABLED}

  rest:
    container_name: supabase-rest
    image: postgrest/postgrest:v11.1.0
    depends_on:
      db:
        # Disable this if you are using an external Postgres database
        condition: service_healthy
    restart: unless-stopped
    environment:
      PGRST_DB_URI: postgres://authenticator:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMAS}
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"

  realtime:
    container_name: realtime-dev.supabase-realtime
    image: supabase/realtime:v2.10.1
    depends_on:
      db:
        # Disable this if you are using an external Postgres database
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "printf \\0 > /dev/tcp/localhost/4000"
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    restart: unless-stopped
    environment:
      PORT: 4000
      DB_HOST: ${POSTGRES_HOST}
      DB_PORT: ${POSTGRES_PORT}
      DB_USER: supabase_admin
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      DB_AFTER_CONNECT_QUERY: 'SET search_path TO _realtime'
      DB_ENC_KEY: supabaserealtime
      API_JWT_SECRET: ${JWT_SECRET}
      FLY_ALLOC_ID: fly123
      FLY_APP_NAME: realtime
      SECRET_KEY_BASE: UpNVntn3cDxHJpq99YMc1T1AQgQpc8kfYTuRgBiYa15BLrx8etQoXz3gZv1/u2oq
      ERL_AFLAGS: -proto_dist inet_tcp
      ENABLE_TAILSCALE: "false"
      DNS_NODES: "''"
    command: >
      sh -c "/app/bin/migrate && /app/bin/realtime eval 'Realtime.Release.seeds(Realtime.Repo)' && /app/bin/server"

  storage:
    container_name: supabase-storage
    image: supabase/storage-api:v0.41.2
    depends_on:
      db:
        # Disable this if you are using an external Postgres database
        condition: service_healthy
      rest:
        condition: service_started
      imgproxy:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:5000/status"
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    restart: unless-stopped
    environment:
      ANON_KEY: ${ANON_KEY}
      SERVICE_KEY: ${SERVICE_ROLE_KEY}
      POSTGREST_URL: http://rest:3000
      PGRST_JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: postgres://supabase_storage_admin:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      FILE_SIZE_LIMIT: 52428800
      STORAGE_BACKEND: s3
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: digitaloceanspaces
      # TODO: https://github.com/supabase/storage-api/issues/55
      REGION: nyc3
      GLOBAL_S3_BUCKET: medusa
      ENABLE_IMAGE_TRANSFORMATION: "true"
      IMGPROXY_URL: http://imgproxy:5001
    volumes:
      - ./volumes/storage:/var/lib/storage:z

  imgproxy:
    container_name: supabase-imgproxy
    image: darthsim/imgproxy:v3.8.0
    healthcheck:
      test: [ "CMD", "imgproxy", "health" ]
      timeout: 5s
      interval: 5s
      retries: 3
    environment:
      IMGPROXY_BIND: ":5001"
      IMGPROXY_LOCAL_FILESYSTEM_ROOT: /
      IMGPROXY_USE_ETAG: "true"
      IMGPROXY_ENABLE_WEBP_DETECTION: ${IMGPROXY_ENABLE_WEBP_DETECTION}
    volumes:
      - ./volumes/storage:/var/lib/storage:z

  meta:
    container_name: supabase-meta
    image: supabase/postgres-meta:v0.66.3
    depends_on:
      db:
        # Disable this if you are using an external Postgres database
        condition: service_healthy
    restart: unless-stopped
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: ${POSTGRES_HOST}
      PG_META_DB_PORT: ${POSTGRES_PORT}
      PG_META_DB_NAME: ${POSTGRES_DB}
      PG_META_DB_USER: supabase_admin
      PG_META_DB_PASSWORD: ${POSTGRES_PASSWORD}

  functions:
    container_name: supabase-edge-functions
    image: supabase/edge-runtime:v1.5.2
    restart: unless-stopped
    environment:
      JWT_SECRET: ${JWT_SECRET}
      SUPABASE_URL: http://kong:8000
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY}
      SUPABASE_DB_URL: postgresql://postgres:${POSTGRES_PASSWORD}@{POSTGRES_DB}:${POSTGRES_PORT}/${POSTGRES_DB}
      # TODO: Allow configuring VERIFY_JWT per function. This PR might help: https://github.com/supabase/cli/pull/786
      VERIFY_JWT: "${FUNCTIONS_VERIFY_JWT}"
    volumes:
      - ./volumes/functions:/home/deno/functions:Z
    command:
      - start
      - --main-service
      - /home/deno/functions/main

  # Comment out everything below this point if you are using an external Postgres database
  db:
    container_name: supabase-db
    image: supabase/postgres:15.1.0.90
    healthcheck:
      test: pg_isready -U postgres -h localhost
      interval: 5s
      timeout: 5s
      retries: 10
    command:
      - postgres
      - -c
      - config_file=/etc/postgresql/postgresql.conf
      - -c
      - log_min_messages=fatal # prevents Realtime polling queries from appearing in logs
    restart: unless-stopped
    ports:
      # Pass down internal port because it's set dynamically by other services
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    environment:
      POSTGRES_HOST: /var/run/postgresql
      PGPORT: ${POSTGRES_PORT}
      POSTGRES_PORT: ${POSTGRES_PORT}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./volumes/db/realtime.sql:/docker-entrypoint-initdb.d/migrations/99-realtime.sql:Z
      # Must be superuser to create event trigger
      - ./volumes/db/webhooks.sql:/docker-entrypoint-initdb.d/init-scripts/98-webhooks.sql:Z
      # Must be superuser to alter reserved role
      - ./volumes/db/roles.sql:/docker-entrypoint-initdb.d/init-scripts/99-roles.sql:Z
      # PGDATA directory is persisted between restarts
      - ./volumes/db/data:/var/lib/postgresql/data:Z

  medusa-server:
    build:
      context: ../medusa-server
      dockerfile: Dockerfile
    image: medusa/server:v0.0.1
    container_name: medusa-server
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      meilisearch:
        condition: service_healthy

    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      REDIS_URL: redis://redis
      JWT_SECRET: ${MEDUSA_JWT_SECRET}
      COOKIE_SECRET: ${MEDUSA_COOKIE_SECRET}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      SENDGRID_FROM: ${SENDGRID_FROM}
      SENDGRID_ORDER_PLACED_ID: ${SENDGRID_ORDER_PLACED_ID}
      SENDGRID_ORDER_CANCELED_ID: ${SENDGRID_ORDER_CANCELED_ID}
      SENDGRID_ORDER_SHIPPED_ID: ${SENDGRID_ORDER_SHIPPED_ID}
      SENDGRID_ORDER_RETURN_REQUESTED_ID: ${SENDGRID_ORDER_RETURN_REQUESTED_ID}
      SENDGRID_ORDER_ITEMS_RETURNED_ID: ${SENDGRID_ORDER_ITEMS_RETURNED_ID}
      SENDGRID_CLAIM_SHIPMENT_CREATED_ID: ${SENDGRID_CLAIM_SHIPMENT_CREATED_ID}
      SENDGRID_SWAP_CREATED_ID: ${SENDGRID_SWAP_CREATED_ID}
      SENDGRID_SWAP_SHIPMENT_CREATED_ID: ${SENDGRID_SWAP_SHIPMENT_CREATED_ID}
      SENDGRID_SWAP_RECEIVED_ID: ${SENDGRID_SWAP_RECEIVED_ID}
      SENDGRID_GIFT_CARD_CREATED_ID: ${SENDGRID_GIFT_CARD_CREATED_ID}
      SENDGRID_CUSTOMER_PASSWORD_RESET_ID: ${SENDGRID_CUSTOMER_PASSWORD_RESET_ID}
      SENDGRID_USER_PASSWORD_RESET_ID: ${SENDGRID_USER_PASSWORD_RESET_ID}
      SENDGRID_MEDUSA_RESTOCK_ID: ${SENDGRID_MEDUSA_RESTOCK_ID}
      ADMIN_CORS: ${MEDUSA_ADMIN_CORS}
      STORE_CORS: ${MEDUSA_STORE_CORS}
      MEILISEARCH_HOST: ${MEILI_HOST}
      MEILISEARCH_API_KEY: ${MEILI_MASTER_KEY}
      MEILI_SEARCHABLE_ATTRIBUTES: ${MEILI_SEARCHABLE_ATTRIBUTES}
      MEILI_DISPLAYED_ATTRIBUTES: ${MEILI_DISPLAYED_ATTRIBUTES}
      MEILI_FILTERABLE_ATTRIBUTES: ${MEILI_FILTERABLE_ATTRIBUTES}
      MEILI_SORTABLE_ATTRIBUTES: ${MEILI_SORTABLE_ATTRIBUTES}
      MEILI_PRIMARY_KEY: ${MEILI_PRIMARY_KEY}
      STRIPE_API_KEY: ${STRIPE_API_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      SPACE_URL: ${SPACE_URL}
      SPACE_BUCKET: ${SPACE_BUCKET}
      SPACE_ENDPOINT: ${SPACE_ENDPOINT}
      SPACE_ACCESS_KEY_ID: ${SPACE_ACCESS_KEY_ID}
      SPACE_SECRET_ACCESS_KEY: ${SPACE_SECRET_ACCESS_KEY}
      MEDUSA_FF_SALES_CHANNELS: "true"
      MEDUSA_FF_TAX_INCLUSIVE_PRICING: "false"
      PORT: 9000
    ports:
      - "9000:9000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - .:/app/medusa
      - node_modules:/app/medusa/node_modules

  meilisearch:
    container_name: meilisearch
    image: getmeili/meilisearch:latest
    healthcheck:
      test: curl -X GET 'http://localhost:7700/health'
      timeout: 5s
      interval: 5s
      retries: 3
    environment:
      - http_proxy
      - https_proxy
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY}
      - MEILI_NO_ANALYTICS=${MEILI_NO_ANALYTICS}
      - MEILI_ENV=${MEILI_ENV}
      - MEILI_LOG_LEVEL
      - MEILI_DB_PATH=${MEILI_DB_PATH}
    ports:
      - ${MEILI_PORT}:7700
    volumes:
      - ./data.ms:/data.ms
    restart: unless-stopped

  redis:
    image: redis
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 30
    expose:
      - 6379

volumes:
  node_modules:
